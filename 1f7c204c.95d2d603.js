(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return O})),n.d(t,"metadata",(function(){return T})),n.d(t,"toc",(function(){return v})),n.d(t,"default",(function(){return j}));var a=n(3),i=n(7),o=n(0),l=n.n(o),r=n(103),s=n(107),u=n(114),c=n(104),d=n(75),p=n.n(d),b=37,h=39;var m=function(e){var t=e.lazy,n=e.block,a=e.defaultValue,i=e.values,r=e.groupId,s=e.className,d=Object(u.a)(),m=d.tabGroupChoices,g=d.setTabGroupChoices,O=Object(o.useState)(a),T=O[0],v=O[1],f=o.Children.toArray(e.children);if(null!=r){var j=m[r];null!=j&&j!==T&&i.some((function(e){return e.value===j}))&&v(j)}var y=function(e){v(e),null!=r&&g(r,e)},w=[];return l.a.createElement("div",null,l.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":n},s)},i.map((function(e){var t=e.value,n=e.label;return l.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":T===t,className:Object(c.a)("tabs__item",p.a.tabItem,{"tabs__item--active":T===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case h:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case b:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return y(t)},onClick:function(){y(t)}},n)}))),t?Object(o.cloneElement)(f.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):l.a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return Object(o.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))};var g=function(e){var t=e.children,n=e.hidden,i=e.className;return l.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:i}),t)},O={id:"components",title:"Component Kit"},T={unversionedId:"components",id:"components",isDocsHomePage:!1,title:"Component Kit",description:"Check out all of these components that can do so many things!",source:"@site/docs/components.md",slug:"/components",permalink:"/docs/docs/components",editUrl:"https://github.com/uscmakers/docs/edit/main/docs/components.md",version:"current",sidebar:"someSidebar",previous:{title:"Adafruit Clue",permalink:"/docs/docs/clue"},next:{title:"Dope Robot",permalink:"/docs/docs/samples/dope-robot"}},v=[{value:"7-color Flash LED",id:"7-color-flash-led",children:[]},{value:"Analog Hall Effect Sensor",id:"analog-hall-effect-sensor",children:[]},{value:"Analog Temperature Sensor",id:"analog-temperature-sensor",children:[]},{value:"Avoidance Sensor",id:"avoidance-sensor",children:[]},{value:"Ball Switch",id:"ball-switch",children:[]},{value:"Button",id:"button",children:[]},{value:"Buzzer",id:"buzzer",children:[]},{value:"Digital Temperature Sensor",id:"digital-temperature-sensor",children:[]},{value:"Flame Sensor",id:"flame-sensor",children:[]},{value:"Hall Effect Sensor",id:"hall-effect-sensor",children:[]},{value:"Heartbeat Sensor",id:"heartbeat-sensor",children:[]},{value:"IR Emitter",id:"ir-emitter",children:[]},{value:"IR Receiver",id:"ir-receiver",children:[]},{value:"Joystick",id:"joystick",children:[]},{value:"Large Microphone",id:"large-microphone",children:[]},{value:"Laser",id:"laser",children:[]},{value:"Light Blocking Module",id:"light-blocking-module",children:[]},{value:"Light Cup",id:"light-cup",children:[]},{value:"Linear Hall Effect Sensor",id:"linear-hall-effect-sensor",children:[]},{value:"Mini Reed Switch",id:"mini-reed-switch",children:[]},{value:"Passive Buzzer",id:"passive-buzzer",children:[]},{value:"Photo Resistor",id:"photo-resistor",children:[]},{value:"RGB LED",id:"rgb-led",children:[]},{value:"Reed Switch",id:"reed-switch",children:[]},{value:"Relay",id:"relay",children:[]},{value:"Rotary Encoder",id:"rotary-encoder",children:[]},{value:"SMD RGB",id:"smd-rgb",children:[]},{value:"Shock Sensor",id:"shock-sensor",children:[]},{value:"Small Microphone",id:"small-microphone",children:[]},{value:"TEMP 18B20 Sensor",id:"temp-18b20-sensor",children:[]},{value:"Tap Module",id:"tap-module",children:[]},{value:"Temperature and Humidity Sensor",id:"temperature-and-humidity-sensor",children:[]},{value:"Tilt Switch",id:"tilt-switch",children:[]},{value:"Touch Sensor",id:"touch-sensor",children:[]},{value:"Tracking Sensor",id:"tracking-sensor",children:[]},{value:"Two-color LED",id:"two-color-led",children:[]},{value:"Two-color LED 2",id:"two-color-led-2",children:[]}],f={toc:v};function j(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},f,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Check out all of these components that can do so many things!"),Object(r.b)("hr",null),Object(r.b)("h3",{id:"7-color-flash-led"},"7-color Flash LED"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"7-color Flash LED",src:Object(s.a)("img/components/7-color_flash_led.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"analog-hall-effect-sensor"},"Analog Hall Effect Sensor"),Object(r.b)("p",null,"HW-495"),Object(r.b)("img",{alt:"Analog Hall Effect Sensor",src:Object(s.a)("img/components/analog_hall_effect_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"analog-temperature-sensor"},"Analog Temperature Sensor"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Analog Temperature Sensor",src:Object(s.a)("img/components/analog_temperature_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"#include <math.h> //needed to calculate th\n\ndouble ConvertTemp(int RawTemp) { //convert raw sensor data to a useable temperature, lots of math\n\n  double Temp;\n  Temp = log(10000.0*((1024.0/RawTemp-1)));\n  Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp ))* Temp );\n  Temp=Temp-273.15;\n  Temp = (Temp * 9.0)/ 5.0 + 32.0; // Convert Celcius to Fahrenheit\n  return Temp;\n}\n\nint sensorPin = A2; // select the input pin for the potentiometer, can change this to any pin\n                    // with a triangle next to it on the dragontail\n\nvoid setup() {\n  Serial.begin(9600); //serial monitor, available on ArduinoIDE\n}\n\nvoid loop() {\n  int readVal=analogRead(sensorPin); //read sensor data\n  double temp =  ConvertTemp(readVal); //convert temperature data\n\n Serial.println(temp);  // display tempature on the serial monitor\n delay(500);\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"avoidance-sensor"},"Avoidance Sensor"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"by Leon X. Durrenberger, M.D., Ph. D., Professor Emeritus, Grand Challenge Scholar, and avid conservative thinker.")),Object(r.b)("p",null,"If you want to use the infrared emitter and receiver to detect a specific distance, then this is the module for you!\nThe obstacle avoidance sensor will emit a LOW signal if an object is detected, and a HIGH signal otherwise.\nIt's very useful if you want to make sure that something stays a specific distance away from your project!"),Object(r.b)("p",null,'To find this sensor, find one with the word "KeyesIR" in the middle.'),Object(r.b)("img",{alt:"Avoidance Sensor",src:Object(s.a)("img/components/avoidance_sensor.jpg"),class:"component-image"}),Object(r.b)("p",null,"There's a few weird things about this sensor that's customizable:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The left potentiometer controls the distance that it detects as the threshold"),Object(r.b)("li",{parentName:"ul"},"The right potentiometer controls the frequency of the emitter. ",Object(r.b)("strong",{parentName:"li"},"You must turn this one clockwise all the way for it to work"),"."),Object(r.b)("li",{parentName:"ul"},"There is a jumper above the right potentiometer that connects two pins labeled ",Object(r.b)("inlineCode",{parentName:"li"},"EN"),".\nIf for any reason you want to only enable your sensor at certain points, take off this jumper, and send a HIGH signal to the ",Object(r.b)("inlineCode",{parentName:"li"},"EN")," pin\nwhen you want it to run. Only do this if you are using way too much power.")),Object(r.b)("p",null,"(For the context of these instructions, hold the sensor so that the emitter and receiver are facing up/on top.)"),Object(r.b)("p",null,"Other things to know about this sensor:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"There is an LED that lights up, labeled ",Object(r.b)("inlineCode",{parentName:"li"},"Sled"),", that will light up whenever the pin ",Object(r.b)("inlineCode",{parentName:"li"},"out")," emits a ",Object(r.b)("inlineCode",{parentName:"li"},"LOW")," signal (aka whenever an\nobject is detected). I have a vague idea that sled means signal LED, but come up with a fun name for it for yourself! I have named\nmine Samuel."),Object(r.b)("li",{parentName:"ul"},"I've found that this module works most consistently when both potentiometers are turned completely clockwise."),Object(r.b)("li",{parentName:"ul"},"The max range of the turning for each of the potentiometers is around 90 degrees, and they are relatively hard to turn. I wasn't\nable to turn them with my fingers alone, but I might just be a weakling."),Object(r.b)("li",{parentName:"ul"},"The potentiometers are the things on top of the blue parts near the bottom of the sensor.")),Object(r.b)("p",null,"For the example code, plug ",Object(r.b)("inlineCode",{parentName:"p"},"GND")," to ",Object(r.b)("inlineCode",{parentName:"p"},"-"),", ",Object(r.b)("inlineCode",{parentName:"p"},"+")," to ",Object(r.b)("inlineCode",{parentName:"p"},"+"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"out")," to pin 16."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"int ledPin = LED_BUILTIN;      // LED pin on arduino\nint detectorPin = 16;  // obstacle avoidance sensor interface\nint val;              // variable to store result\n//int enablePin = 2;  // sensor enable interface (EN)\n\nvoid setup()\n{\n  pinMode(ledPin, OUTPUT);  // Define LED as output interface\n  pinMode(detectorPin, INPUT);  // Define obstacle avoidance sensor as input interface\n\n  // [uncomment and remove jumper on module to use enable pin (EN)]\n  //pinMode(enablePin, OUTPUT);\n  //digitalWrite(enablePin, HIGH);  // Enable sensor\n}\n\nvoid loop()\n{\n  val = digitalRead(detectorPin); // Read value from sensor\n  if(val == LOW) // When the sensor detects an obstacle, the LED on the Arduino lights up\n  {\n    digitalWrite(ledPin, HIGH);\n  }\n  else\n  {\n    digitalWrite(ledPin, LOW);\n  }\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"ball-switch"},"Ball Switch"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Ball Switch",src:Object(s.a)("img/components/ball_switch.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"button"},"Button"),Object(r.b)("p",null,"Part: HW-483"),Object(r.b)("img",{alt:"Button",src:Object(s.a)("img/components/buttonAlone.jpg"),class:"component-image"}),Object(r.b)("p",null,"The pushbutton is pretty straightforward: you can use it as an input, and check whether is pushing the button or not. As you can see in the diagram above, left == gnd, center == vdd, and right == data.\nNote: A low input indicates that the button is pressed."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"const int buttonPin = 2; //set these as constants\nint buttonState = 0;\n\nvoid setup() {\n  pinMode(LED_BUILTIN, OUTPUT); //using the inbuilt LED on the back of the clue!\n  pinMode(buttonPin, INPUT); //set the pushbutton sensor as an input\n}\n\nvoid loop() {\n  buttonState = digitalRead(buttonPin);//read the state of the button\n\n  if (buttonState == HIGH) { //if the button is NOT pressed\n    //turn LED on\n    digitalWrite(LED_BUILTIN, HIGH);\n  } else { //if the button is pressed\n    // turn LED off:\n    digitalWrite(LED_BUILTIN, LOW);\n  }\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import board\nimport digitalio\nimport time\n#here I decide to use an LED to check the status of the button\nled = digitalio.DigitalInOut(board.D7) #set led pin\nbutton = digitalio.DigitalInOut(board.D1) #set button pin\nled.direction = digitalio.Direction.OUTPUT\nbutton.direction = digitalio.Direction.INPUT\n\nwhile True:\n  if button.value: #if the button is off\n    led.value = False #led is off\n  else: #if the button is on\n    led.value = True #led is on\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"buzzer"},"Buzzer"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Buzzer",src:Object(s.a)("img/components/buzzer.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"digital-temperature-sensor"},"Digital Temperature Sensor"),Object(r.b)("p",null,"This sensor monitors temperature and, if the temperature is above a specific threshold, outputs a logical 1. If the temp is below the threshold, it outputs a 0. How do you set this threshold? Why, by adjusting the trim pot! using a small flathead screwdriver, you can increase (clockwise) or decrease (counter-clockwise) the threshold temperature.\nNote: Ben and Baran could not get this thing to work properly. If you manage to get it functioning properly you will get a special prize."),Object(r.b)("img",{alt:"Digital Temperature Sensor",src:Object(s.a)("img/components/digital_temperature_sensor.jpeg"),class:"component-image"}),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"#define LED_PIN 13\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_PIN, OUTPUT);\n  pinMode(6, INPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  if(digitalRead(6) == HIGH) {\n    digitalWrite(LED_PIN, HIGH);\n  } else {\n    digitalWrite(LED_PIN, LOW);\n  }\n\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"flame-sensor"},"Flame Sensor"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Flame Sensor",src:Object(s.a)("img/components/flame_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"hall-effect-sensor"},"Hall Effect Sensor"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Hall Effect Sensor",src:Object(s.a)("img/components/hall_effect_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"heartbeat-sensor"},"Heartbeat Sensor"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Heartbeat Sensor",src:Object(s.a)("img/components/heartbeat_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"ir-emitter"},"IR Emitter"),Object(r.b)("p",null,"This looks like a normal LED, but the light it emits is on the infra-red spectrum. when you turn it on and don't see anything, don't panic! Humans cannot see infra-red light. Who can? The IR receiver can! Also, some cameras can pick it up, and it is used in night vision goggles. Most remotes use IR blips to communicate, so with this emitter you could emulate almost any remote!"),Object(r.b)("img",{alt:"IR Emitter",src:Object(s.a)("img/components/ir_emitter.jpeg"),class:"component-image"}),Object(r.b)("p",null,"The IR emitter has three connections -- power, ground, and S. The S pin, when high, will turn on the IR emitter. Remember that you won't be able to see any light coming out. If you want to test the IR emitter's functionality, the following codes have also incorporated the IR receiver. Make sure the receiver and the emitter are pointed at each other."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"void setup() {\n  pinMode(2, OUTPUT); // pin 2 is connected to the signal pin of the IR Emitter\n  digitalWrite(2, LOW);\n  pinMode(4, INPUT_PULLUP); // pin 4 is the IR Receiver connection\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  digitalWrite(2, HIGH);\n  Serial.println(digitalRead(4));\n  delay(100);\n  digitalWrite(2, LOW);\n  Serial.println(digitalRead(4));\n  delay(100);\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"ir-receiver"},"IR Receiver"),Object(r.b)("p",null,"The IR receiver is a sensor that measures IR light. You can use this in combination with the IR emitter for easy wireless communication! This emitter is similar to the one you would find in almost any remote-controlled appliance."),Object(r.b)("img",{alt:"IR Receiver",src:Object(s.a)("img/components/ir_reciever.jpeg"),class:"component-image"}),Object(r.b)("p",null,"The code below simply demonstrates how to read data from the IR receiver. Point any remote control at the receiver and see the indicator light on the sensor blink rapidly! You can also see the signal in the serial monitor, but be quick because it happens very fast. the signal pin of the module should be connected to pin 6."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"void setup() {\n  // put your setup code here, to run once:\n  pinMode(6, INPUT);\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  Serial.println(digitalRead(6));\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"joystick"},"Joystick"),Object(r.b)("p",null,"This is a description of how to use this analog joystick!"),Object(r.b)("img",{alt:"Joystick",src:Object(s.a)("img/components/joystick.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),'\n# This joystick has 3 values - 1 digital for the button, and 2 analogs for the x and y directions!\n\nimport digitalio\nimport analogio\nimport board\n\n# Set the pin number\nbutton = digitalio.DigitalInOut(board.D6)\n# Input/output\nbutton.direction = digitalio.Direction.INPUT\n# Pullup resistor\nbutton.pull = digitalio.Pull.UP\n\nx = analogio.AnalogIn(board.A4)\ny = analogio.AnalogIn(board.A0)\n\n\n\nwhile True:\n  # Access the pin values with .value tag!\n\n  print("Button value: " + button.value)\n  #print(x.value)\n  #print(y.value)\n')))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"large-microphone"},"Large Microphone"),Object(r.b)("p",null,"This microphone can detect sound level.\nPart: HW-485"),Object(r.b)("img",{alt:"Large Microphone",src:Object(s.a)("img/components/large_microphone.jpg"),class:"component-image"}),Object(r.b)("p",null,"This microphone can work with both analog and digital inputs, but I strongly recommend that you use the analog input pin. The sample code below is done with analog input as well. In the arduino ide, open serial plotter to see the graph of outputs. With circuit python, the printing is done on the lcd. Please see the above image in order to see the pin labels."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"int soundPin = A2; // select the input pin for the microphone\nint val = 0; // variable to store the value coming from the sensor\n\nvoid setup ()\n{\n  pinMode (soundPin, INPUT);\n  Serial.begin (115200); //begin the serial\n}\n\nvoid loop ()\n{\n  val = analogRead (soundPin);//read input\n  delay (300);\n  Serial.println (val, DEC);\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import board\nimport time\nfrom analogio import AnalogIn\n\nmicrophone = AnalogIn(board.A2)\n\nwhile True:\n    print(get_voltage(photo)) #check what the voltage is and print\n    time.sleep(0.1) #sleep for a 1/10th of a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"laser"},"Laser"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Laser",src:Object(s.a)("img/components/laser.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"light-blocking-module"},"Light Blocking Module"),Object(r.b)("p",null,"The light blocking module (HW-487) has a u-shaped component that detects whether something is blocking light from passing between the two"),Object(r.b)("img",{alt:"Light Blocking Module",src:Object(s.a)("img/components/light_blocking_module.jpeg"),class:"component-image"}),Object(r.b)("p",null,"The microcontroller should treat this as a digital input device."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),'int lightBlockingSensorPin = 2;\nint ledPin = 14;\nint lightBlockingSensorVal; // define numeric variables val\nvoid setup ()\n{\n  Serial.begin(9600);\n  pinMode (lightBlockingSensorPin, INPUT) ;\n  pinMode (ledPin, OUTPUT) ;\n}\nvoid loop ()\n{\n  lightBlockingSensorVal = digitalRead (lightBlockingSensorPin) ;\n\n  digitalWrite(ledPin, lightBlockingSensorVal);   // light up LED when no light is detected by sensor\n\n  Serial.print("Light blocking sensor blocked?: ");\n  Serial.println(lightBlockingSensorVal);\n}\n'))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import board\nimport digitalio\n\nlightBlockingSensor = digitalio.DigitalInOut(board.D2) #set light blocking sensor pin\nlightBlockingSensor.direction = digitalio.Direction.INPUT\n\nled = digitalio.DigitalInOut(board.D14) #set led pin\nled.direction = digitalio.Direction.OUTPUT\n\nwhile True:\n  if lightBlockingSensor.value: #if light detects no light (something is blocking it)\n    led.value = True; # led is on\n  else: #if nothing is blocking the light blocking sensor\n    led.value = False; #led is off\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"light-cup"},"Light Cup"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Light Cup",src:Object(s.a)("img/components/light_cup.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"linear-hall-effect-sensor"},"Linear Hall Effect Sensor"),Object(r.b)("p",null,"HW-509\nThis sensor produces a voltage when placed in a magnetic field. In practice, it is very similar to the digital hall effect sensor (HW-492) and the analog hall effect sensor (HW-495), however, it has an both analog and digital pins."),Object(r.b)("img",{alt:"Linear Hall Effect Sensor",src:Object(s.a)("img/components/linear_hall_effect_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"The linear hall effect sensor is an input device that is used to measure the presence and/or strength of a magnetic field. As labeled on the component itself and in the picture above, the pins from left to right are: Analog input, GND, VDD, Digital input.\nKey things:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"This sensor can produce an analog or a digital value, as it has an ADC built-in."),Object(r.b)("li",{parentName:"ul"},"It has a built-in sensitivity adjustment (fine adjustment). This is the bronze-colored adjuster on the blue piece. You can use your fingernail or flathead screwdriver or something to adjust it. Turning the sensitivity fine adjustment ",Object(r.b)("strong",{parentName:"li"},"counter clockwise")," makes the analog hall sensor measurement ",Object(r.b)("strong",{parentName:"li"},"more sensitive"),", and turning it clockwise makes it less sensitive."),Object(r.b)("li",{parentName:"ul"},"It has a signal output indication. As shown in the photo below, when a magnet is held near the transistor, the built-in indication light (on the left in the photo) lights up. (This is not programmed by the user, it comes like this.)")),Object(r.b)("img",{alt:"Linear Hall Effect Sensor with Magnet",src:Object(s.a)("img/components/linear_hall_effect_sensor2.jpeg"),class:"component-image"}),Object(r.b)("p",null,"When you hold a magnet near the black transistor on the sensor (at the top of the photo), the digital reading should be 1 (HIGH). The analog sensor's reading is a numerical value that is different depending on magnet strength, sensitivity adjustment, magnet proximity, and other factors."),Object(r.b)("p",null,"Note on the below CircuitPython code: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://learn.adafruit.com/circuitpython-essentials/circuitpython-analog-in"}),"here")," are more details on reading analog input in circuitpython, including an explanation of the ",Object(r.b)("inlineCode",{parentName:"p"},"get_voltage(pin)")," helper function."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),'int linearHallSensorDigitalPin = 8; // define linear hall sensor digital pin\nint linearHallSensorAnalogPin = 2; // define linear hall sensor analog pin\n//int hallSensorPin = 9;\n//int buttonpin = 3; // define Metal Touch Sensor Interface\nint linearHallSensorDigitalVal, linearHallSensorAnalogVal; // define numeric variables val\nint lineCount = 0;  // there are 30 lines on screen for printing\nvoid setup ()\n{\n  Serial.begin(9600);\n  // define sensor pins as input interface\n  pinMode (linearHallSensorDigitalPin, INPUT) ;\n  pinMode (linearHallSensorAnalogPin, INPUT) ;\n}\nvoid loop ()\n{\n  linearHallSensorDigitalVal = digitalRead (linearHallSensorDigitalPin) ;\n  linearHallSensorAnalogVal = analogRead (linearHallSensorAnalogPin) ;\n\n  Serial.print("Linear hall sensor - digital: ");\n  Serial.print(linearHallSensorDigitalVal);\n  Serial.print(" , analog: ");\n  Serial.println(linearHallSensorAnalogVal);\n}\n'))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),'import board\nimport digitalio\nimport analogio\n\nlinearHallSensor_analog = analogio.AnalogIn(board.A2) #set light blocking sensor pin\n\nlinearHallSensor_digital = digitalio.DigitalInOut(board.D7)\nlinearHallSensor_digital.direction = digitalio.Direction.INPUT\n\nled = digitalio.DigitalInOut(board.D14) #set led pin\nled.direction = digitalio.Direction.OUTPUT\n\ndef get_voltage(pin):\n  return (pin.value * 3.3) / 65536\n\n\nwhile True:\n  digitalReading = linearHallSensor_digital.value\n\n  led.value = digitalReading  # set led based on digitalr reading of magnetic field\n  print("digital:", digitalReading, "voltage:", get_voltage(linearHallSensor_analog), "V")\n')))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"mini-reed-switch"},"Mini Reed Switch"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Mini Reed Switch",src:Object(s.a)("img/components/mini_reed_switch.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"passive-buzzer"},"Passive Buzzer"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Passive Buzzer",src:Object(s.a)("img/components/passive_buzzer.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"photo-resistor"},"Photo Resistor"),Object(r.b)("p",null,"Part: HW-486\nThis is a photoresistor sensor, which means that it can measure the amount of ambient light!"),Object(r.b)("img",{alt:"Photo Resistor",src:Object(s.a)("img/components/photo_resistor.jpg"),class:"component-image"}),Object(r.b)("p",null,"See the image above to see the gnd, vdd, and data pins. You need to declare this as an input, and please note that you have to select an ANALOG pin and make an ANALOG measurement.\nNote: The sensor is not very accurate, but should be good enough to distinguish between night and day."),Object(r.b)("p",null,"Note on the below CircuitPython code: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://learn.adafruit.com/circuitpython-essentials/circuitpython-analog-in"}),"here")," are more details on reading analog input in circuitpython, including an explanation of the ",Object(r.b)("inlineCode",{parentName:"p"},"get_voltage(pin)")," helper function."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"const int photoPin = A2; //set these as constants\nint val = 0;\n\nvoid setup() {\n  pinMode(photoPin, INPUT); //set the photoresistor sensor as an input\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  val = analogRead(photoPin);//read the value of the photoresistor\n  delay(1000);\n  Serial.println(val, DEC); //print on the serial monitor\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import board\nimport time\nfrom analogio import AnalogIn\n\nphoto = AnalogIn(board.A2)\n\n<<<<<<< HEAD\ndef get_voltage(pin):\n    return (pin.value * 3.3) / 65536 #convert it to a voltage value between 0-3V\n \n \n=======\ndef convertToVoltage(pin):\n    return (pin.value * 3) / 65536 #convert it to a voltage value between 0-3V\n\n\n>>>>>>> f446c0445c19beee4ba89df224df56540071e4c0\nwhile True:\n    print((get_voltage(photo),)) #check what the voltage is- if the voltage is higher, it is brighter\n    time.sleep(1) #sleep for a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"rgb-led"},"RGB LED"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"RGB LED",src:Object(s.a)("img/components/rgb_led.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"reed-switch"},"Reed Switch"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Reed Switch",src:Object(s.a)("img/components/reed_switch.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"relay"},"Relay"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Relay",src:Object(s.a)("img/components/relay.jpeg"),class:"component-image"}),Object(r.b)("p",null,"The relay module is an effective way to convert existing appliances into smart-objects. The relay is a heavy-duty, digitally controlled switch that can handle anything from battery power to wall current. The relay has 3 control pins (+V, Gnd, and Signal) and three screw terminals (NC, common, NO). When no voltage is applied to the relay, the NC (Normally Closed) terminal and the common (middle) terminals are connected. When a logical high voltage is applied to the signal pin, an electromagnet removes the NC-Common connection and connects the common and NO (normally open) terminals. You could, for example, splice the the power cord running to your toaster -- BOOM SMART TOASTER!\nDISCLAIMER: do NOT splice any power cords running high voltage or current!! Getting zapped by an improperly shielded power cable can KILL you. It can also start fires. Consult with an expert before modifying any existing power cords. This module can be used effectively in low-power applications as well!"),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"void setup() {\n  // put your setup code here, to run once:\n  pinMode(2, OUTPUT); // pin 2 is connected to the signal pin of the relay\n  digitalWrite(2, LOW);\n  pinMode(5, INPUT_PULLUP); // pin 5 is the left-hand Clue button\n}\n\nshort relay_state = 0;\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  if(!digitalRead(5)) {\n    if(!relay_state) relay_state = 1;\n    else relay_state = 0;\n    delay(200); //EZ debounce\n  }\n  if(relay_state) digitalWrite(2, HIGH);\n  else digitalWrite(2, LOW);\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"rotary-encoder"},"Rotary Encoder"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Rotary Encoder",src:Object(s.a)("img/components/rotary_encoder.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"smd-rgb"},"SMD RGB"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"SMD RGB",src:Object(s.a)("img/components/smd_rgb.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"shock-sensor"},"Shock Sensor"),Object(r.b)("p",null,"Part Number: HW-513"),Object(r.b)("img",{alt:"Shock Sensor",src:Object(s.a)("img/components/shock_sensor.jpg"),class:"component-image"}),Object(r.b)("p",null,'As you can see in the above image, the left-most pin is gnd, the center pin is power, and the right pin is data. This sensor is an input, and can detect "shocks". You can apply shock to this sensor by dropping it or hitting the blue part lightly with your finger.\nNote: A low read from the sensor means it detected a shock.'),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"const int shockPin = 1; //set these as constants\nint val = 0;\n\nvoid setup() {\n  pinMode(LED_BUILTIN, OUTPUT); //using the inbuilt LED on the back of the clue!\n  pinMode(shockPin, INPUT); //set the shock sensor as an input\n}\n\nvoid loop() {\n  val = digitalRead(shockPin);//read the state of the button\n\n  if (val == LOW) { //if a shock is detected\n    //turn LED on\n    digitalWrite(LED_BUILTIN, HIGH);\n    delay(1000); //delay\n  } else { //if the shock is not detected\n    // turn LED off:\n    digitalWrite(LED_BUILTIN, LOW);\n  }\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import board\nimport digitalio\nimport time\n\nled = digitalio.DigitalInOut(board.D7) #set led pin\nshock = digitalio.DigitalInOut(board.D1) #set shock pin\nled.direction = digitalio.Direction.OUTPUT\nshock.direction = digitalio.Direction.INPUT\n\nwhile True:\n  if shock.value: #if the shock is not detected\n    led.value = False; #led is off\n  else: #if the shock is detected\n    led.value = True; #led is on\n    time.sleep(1); #delay so you can see the led light\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"small-microphone"},"Small Microphone"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Small Microphone",src:Object(s.a)("img/components/small_microphone.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"temp-18b20-sensor"},"TEMP 18B20 Sensor"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"TEMP 18B20 Sensor",src:Object(s.a)("img/components/temp_18b20_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"tap-module"},"Tap Module"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Tap Module",src:Object(s.a)("img/components/tap_module.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"temperature-and-humidity-sensor"},"Temperature and Humidity Sensor"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Temperature and Humidity Sensor",src:Object(s.a)("img/components/temperature_and_humidity_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"tilt-switch"},"Tilt Switch"),Object(r.b)("p",null,"This tilt switch will be able to detect whether is tilting to the right or the left.\nPart: HW-505"),Object(r.b)("img",{alt:"Tilt Switch",src:Object(s.a)("img/components/tilt_switch.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Please see the above image to see where the vdd, gnd, and data pins are. The tilt sensor is used as a digital input, and if the bead of mercury is tilted towards the base, then the led on the sensor will flash. If the bead of mercury is tilted away from the base, then the led on the sensor will turn off."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"const int tiltPin = 2; //set these as constants\nint val = 0;\n\nvoid setup() {\n  pinMode(LED_BUILTIN, OUTPUT); //using the inbuilt LED on the back of the clue!\n  pinMode(tiltPin, INPUT); //set the shock sensor as an input\n}\n\nvoid loop() {\n  val = digitalRead (tiltPin) ;// read the values assigned to the digital interface 3 val\n  if (val == HIGH) // When the mercury tilt switch sensor detects a signal, LED flashes\n  {\n    digitalWrite (LED_BUILTIN, HIGH);\n  }\n  else\n  {\n    digitalWrite (LED_BUILTIN, LOW);\n  }\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import board\nimport digitalio\nimport time\n\ntilt = digitalio.DigitalInOut(board.D2) #set tilt sensor pin\ntilt.direction = digitalio.Direction.INPUT\n\nled = digitalio.DigitalInOut(board.D7) #set led pin\nled.direction = digitalio.Direction.OUTPUT\n\nwhile True:\n  if tilt.value: #if the tilt sensor is tilted towards the base\n    led.value = True; #led is off\n  else: #if the tilt sensor is tilted away from the base\n    led.value = False; #led is on\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"touch-sensor"},"Touch Sensor"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Touch Sensor",src:Object(s.a)("img/components/touch_sensor.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"tracking-sensor"},"Tracking Sensor"),Object(r.b)("p",null,"This is a sensor that can detect if the object in front of the white circle is black or white. You can use this to make a robot car follow a straight line!\nPart: HW-511"),Object(r.b)("img",{alt:"Tracking Sensor",src:Object(s.a)("img/components/tracking_sensor.jpg"),class:"component-image"}),Object(r.b)("p",null,"Please see the above image to see where the data, gnd, and vdd pins are. If you are testing this code using the arduino IDE, open the serial monitor to see if it is correctly detecting whether the object in front of it is black or white. If you are using circuit python, make sure to look at the lcd display."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"const int trackPin = 2; //set these as constants\nint val = 0;\n\nvoid setup() {\n  Serial.begin(9600); //start serial\n  pinMode(trackPin, INPUT); //set the tracking sensor as an input\n}\n\nvoid loop() {\n  val = digitalRead (trackPin) ;// read the values of the tracking sensor\n  Serial.println(val);\n  delay(500); //delay so you don't spam the serial console\n}\n\n\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import board\nimport digitalio\nimport time\n\ntrack = digitalio.DigitalInOut(board.D2) #set track sensor pin\ntrack.direction = digitalio.Direction.INPUT\n\nwhile True:\n  print(track.value); #print either a 0 or 1\n  sleep(1); # delay for a second\n\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"two-color-led"},"Two-color LED"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Two-color LED",src:Object(s.a)("img/components/two-color_led.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"two-color-led-2"},"Two-color LED 2"),Object(r.b)("p",null,"This is a description about what the module is/does so that people will know what they can use it for!"),Object(r.b)("img",{alt:"Two-color LED 2",src:Object(s.a)("img/components/two-color_led_2.jpeg"),class:"component-image"}),Object(r.b)("p",null,"Now explain everything about how to use the module. This will include how the pins should be connected,\nwhether the microcontroller should be treating this an output or input, digital or analog, or if it should be something else entirely."),Object(r.b)(m,{defaultValue:"arduino",values:[{label:"Arduino",value:"arduino"},{label:"CircuitPython",value:"py"}],mdxType:"Tabs"},Object(r.b)(g,{value:"arduino",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-arduino"}),"// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalToggle(LED_BUILTIN); // turn the LED on (HIGH is the voltage level)\n  delay(500);                // wait for half a second\n}\n"))),Object(r.b)(g,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"# Import all of the necessary modules.\nimport board\nimport digitalio\nimport time\n\n# Initialize digital pin 17 as an output.\nled = digitalio.DigitalInOut(board.D17)\nled.direction = digitalio.Direction.OUTPUT\n\n# Loop forever\nwhile True:\n    led.value = True    # Turn LED on\n    time.sleep(0.5)     # Wait half a second\n    led.value = False   # Turn LED off\n    time.sleep(0.5)     # Wait half a second\n")))))}j.isMDXComponent=!0},103:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),c=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),b=a,h=d["".concat(l,".").concat(b)]||d[b]||p[b]||o;return n?i.a.createElement(h,r(r({ref:t},u),{},{components:n})):i.a.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=b;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var u=2;u<o;u++)l[u]=n[u];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},104:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}},107:function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return l}));var a=n(21),i=n(111);function o(){var e=Object(a.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var o=void 0===a?{}:a,l=o.forcePrependBaseUrl,r=void 0!==l&&l,s=o.absolute,u=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if(Object(i.b)(n))return n;if(r)return t+n;var c=n.startsWith(t)?n:t+n.replace(/^\//,"");return u?e+c:c}(o,n,e,t)}}}function l(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},111:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return i}))},114:function(e,t,n){"use strict";var a=n(0),i=n(115);t.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},115:function(e,t,n){"use strict";var a=n(0),i=Object(a.createContext)(void 0);t.a=i}}]);